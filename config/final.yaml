---
# The Alexa top list, http://s3.amazonaws.com/alexa-static/top-1m.csv.zip
alexa_list: resources/alexa-top100000-2021-07-18.csv.gz

# Versions of QUIC supported in our experiments
quic_versions: ["h3-29"]

# Second level domains that whose representation in the dataset are reduced
frequent_slds: ["blogspot.com", "appspot.com", "myshopify.com", "withgoogle.com",
                "translate.goog", "sch.id"]

webpage_graphs:
  # The number of dependency graphs collected in each batch
  batch_size: 100
  # Collect n_batches * batch_size web-page graphs
  n_batches: 190

# The log level passed to RUST_LOG for the neqo-client
neqo_log_level: "neqo-transport=info"

# The User-Agent to use for collections
user_agent: >-
  Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko)
  Chrome/87.0.4280.88 Safari/537.36


# Wireguard clients and thier ports assignments, which are used to filter
# the packet captures
wireguard:
  n_regions: 3
  n_clients_per_region: 12
  client_ports:
    - [51501, 51502, 51503, 51504, 51505, 51506, 51507, 51508, 51509, 51510, 51511, 51512]
    - [51601, 51602, 51603, 51604, 51605, 51606, 51607, 51608, 51609, 51610, 51611, 51612]
    - [51701, 51702, 51703, 51704, 51705, 51706, 51707, 51708, 51709, 51710, 51711, 51712]
  interface: "docker0"


experiment:
  # Default configurations for FRONT and tamaraw
  default:
    front_config: &front-default
      max_client_packets: 1000
      max_server_packets: 1000
      packet_size: 1200
      peak_minimum: 0.5
      peak_maximum: 7
    tamaraw_config: &tamaraw-default
      rate_in: 5
      rate_out: 20
      packet_multiple: 300
      packet_size: 750

  shaping_eval:
    n_samples: 500
    scores:
      ts_offset: {min: 0, max: 200, inc: 5}
      resample_rates: ["1ms", "5ms", "25ms", "50ms"]
      lcss_eps: {"front": 150, "tamaraw": 250}
      min_pkt_size: [0]
    front: *front-default
    tamaraw: *tamaraw-default

  ml_eval_conn:
    dataset:
      n_monitored: 100
      n_instances: 100
      n_unmonitored: 10_000
    min_pkt_size: 150
    splits: {n_folds: 5, seed: 438, validation_size: 0.1}
    classifiers: ["kfp", "dfnet", "varcnn-sizes", "varcnn-time"]
    front: *front-default
    tamaraw:
      <<: *tamaraw-default
      packet_size: 1200
      msd_limit_excess: 1500

  ml_eval_mconn:
    dataset:
      n_monitored: 100
      n_instances: 100
      n_unmonitored: 0
    splits: {n_folds: 5, seed: 438, validation_size: 0.1}
    classifiers: ["kfp", "dfnet", "varcnn-sizes", "varcnn-time"]
    front:
      <<: *front-default
      use_empty_resources: true
    tamaraw:
      <<: *tamaraw-default
      packet_size: 1200
      msd_limit_excess: 1500
      use_empty_resources: true

  ml_eval_brows:
    dataset:
      n_monitored: 100
      n_instances: 100
      n_unmonitored: 10_000
    min_pkt_size: 150
    splits: {n_folds: 5, seed: 438, validation_size: 0.1}
    classifiers: ["kfp", "dfnet", "varcnn-sizes", "varcnn-time"]
    front: *front-default

# excess_msd:
#   max_samples: 1000
#   padding: {rate: 1, duration: 10, interval: 5}  # Mbps, seconds, milliseconds
#   excess_values: [16, 350, 700, 1000, 2000]

# delay_vs_drop:
#   n_monitored: 20
#   n_instances: 100
#   n_unmonitored: 1000
#   tamaraw: *tamaraw-default
#   splits:
#     n_folds: 5
#     seed: 6781
#     validation_size: 0.1

# front_single_eval:
#   max_samples: 1000
#   front_config: *front-default

# tamaraw_single_eval:
#   max_samples: 1000
#   tamaraw_config: *tamaraw-default

# ml_eval:
#   monitored: {samples: 100, instances: 100, extra: 0.6}
#   unmonitored: {samples: 10_000, instances: 1, extra: 0.25}
#   snaplen: 96
#   front_config: *front-default
#   tamaraw_config: *tamaraw-default
#   min_packet_size: 100
#   splits:
#     n_folds: 10
#     seed: 437
#     validation_size: 0.1
#   classifiers: ["kfp", "dfnet"]
