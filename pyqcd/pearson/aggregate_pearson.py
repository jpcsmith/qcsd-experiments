#!/usr/bin/env python3
"""Usage: module [options] -- [INPUTS]...

Aggregates pearsons values generated from "measure_pearson.py"
into a single plot. Analyses distribution of values

Inputs:
    list of "res.json" files generated by "measure_pearson.py"

Options:
    --output-plot filename
        Save the distribution of pearsons values to filename
"""

import numpy as np
from matplotlib import pyplot as plt
from scipy.stats import norm
import json
import doceasy

N_BINS_NORMAL = 150


def plot_normal(data, ax, title):
    ax.set_xlim(left=-0.125, right=1.0)
    count_, bins, _ = ax.hist(data, bins=N_BINS_NORMAL, density=True)
    # fitting curve
    mu, std = norm.fit(data)
    xs = np.arange(-0.125, 1.0, 0.01)
    ax.plot(
             xs,
             1/(std * np.sqrt(2 * np.pi)) *
             np.exp(-(xs - mu)**2 / (2 * std**2)),
             linewidth=2, color='r', label=f'$\mu={mu:.3f}$\n$stdev={std:.3f}$'
            )
    ax.axvline(mu, color='k', linestyle='dashed', linewidth=1)
    ax.set_title(title)
    ax.set_ylabel("Prevalence")
    ax.legend()
    ax.grid()


def main(inputs, output_plot):
    # load data
    N = len(inputs)
    pearsons_TX = np.array([])
    pearsons_RX = np.array([])
    for path in inputs:
        with open(path, "r") as json_file:
            data = json.load(json_file)
            (r_tx, _) = data['TX']['stats']
            (r_rx, _) = data['RX']['stats']
            pearsons_TX = np.append(pearsons_TX, r_tx)
            pearsons_RX = np.append(pearsons_RX, r_rx)

    # cleanup values
    pearsons_TX = pearsons_TX[~np.isnan(pearsons_TX)]
    pearsons_RX = pearsons_RX[~np.isnan(pearsons_RX)]
    assert (not np.isnan(pearsons_TX).any())
    assert (not np.isnan(pearsons_RX).any())

    f, ax = plt.subplots(3, 1, figsize=(10, 12))
    # plot dummy TX
    plot_normal(pearsons_TX, ax[0], 'client -> server chaff')
    # plot dummy RX
    plot_normal(pearsons_RX, ax[1], 'server -> client chaff')
    # plot all
    plot_normal(np.append(pearsons_RX, pearsons_TX),
                ax[2],
                "overall chaff packets")
    ax[2].set_xlabel("Pearson score")

    f.savefig(output_plot, dpi=300,  bbox_inches="tight")


if __name__ == "__main__":
    main(**doceasy.doceasy(__doc__, doceasy.Schema({
        "INPUTS": [str],
        "--output-plot": doceasy.Or(None, str)
    }, ignore_extra_keys=True)))

